org: morbo
app: practice-tool-rescript
service: practice-tool-rescript
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  stage: ${self:custom.currentStage}
  environment:
    TABLE_NAME_PROJECTS: ${self:custom.tableNameProjects}
    TABLE_NAME_HISTORY: ${self:custom.tableNameHistory}
  httpApi:
    authorizers:
      practiceToolAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:custom.userPoolId}
        audience:
          - ${self:custom.userPoolClientId}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tableNameProjects}"

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolId: ${self:provider.region}_NWWCPvxRL
  userPoolClientId: 5l72lsb5di0lrft25llng18vl0
  tableNameProjects: ${self:service}-projects-${self:custom.currentStage}
  tableNameHistory: ${self:service}-history-${self:custom.currentStage}

functions:
  saveProject:
    handler: src/project/Project_Lambda_Save.res.handler
    events:
      - httpApi:
          path: /project
          method: POST
          authorizer:
            name: practiceToolAuthorizer
            scopes:
              - openid
              - profile
              - email
  getProject:
    handler: src/project/Project_Lambda_Get.res.handler
    events:
      - httpApi:
          path: /project/{name}
          method: GET
          authorizer:
            name: practiceToolAuthorizer
            scopes:
              - openid
              - profile
              - email
  deleteProject:
    handler: src/project/Project_Lambda_Delete.res.handler
    events:
      - httpApi:
          path: /project/{name}
          method: DELETE
          authorizer:
            name: practiceToolAuthorizer
            scopes:
              - openid
              - profile
              - email

resources:
  Resources:
    PracticeToolProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNameProjects}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: user-id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: user-id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
    PracticeToolHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNameHistory}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: user-id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: user-id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
