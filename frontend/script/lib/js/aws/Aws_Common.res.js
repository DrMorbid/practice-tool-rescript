// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Array = require("@rescript/core/lib/js/src/Core__Array.res.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.res.js");
var ClientS3 = require("@aws-sdk/client-s3");

function toString(environment) {
  if (environment === "Development") {
    return "DEV";
  } else {
    return "PROD";
  }
}

var Environment = {
  toString: toString
};

function getBucket(environment) {
  if (environment === "Development") {
    return "practice-tool-dev";
  } else {
    return "practice-tool";
  }
}

async function ls(environment) {
  var match = await new ClientS3.S3Client({}).send(new ClientS3.ListObjectsCommand({
            Bucket: getBucket(environment)
          }));
  return Core__Option.getOr(match.Contents, []).map(function (param) {
              return param.Key;
            });
}

async function rm(environment) {
  var bucket = getBucket(environment);
  console.log("Deleting content of %s bucket", toString(environment));
  var files = await ls(environment);
  var results = await Promise.all(files.map(async function (key) {
            var result = await new ClientS3.S3Client({}).send(new ClientS3.DeleteObjectCommand({
                      Bucket: bucket,
                      Key: key
                    }));
            if (result.$metadata.httpStatusCode >= 400) {
              console.error("Failed to delete a file %s: %o", key, result);
              return key;
            }
            
          }));
  if (Core__Array.keepSome(results).length === 0) {
    console.log("%d files successfully deleted", files.length);
    return ;
  }
  
}

exports.Environment = Environment;
exports.getBucket = getBucket;
exports.ls = ls;
exports.rm = rm;
/* @aws-sdk/client-s3 Not a pure module */
